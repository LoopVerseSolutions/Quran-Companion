#!/bin/bash

# Script to export a Quran Companion app from Replit to GitHub
# Usage: ./export-from-replit.sh <github_repo_url>

set -e

# Check if GitHub repository URL is provided
if [ -z "$1" ]; then
  echo "=== Quran Companion App Export Tool ==="
  echo "You need to provide your GitHub repository URL to continue."
  echo "Usage: ./export-from-replit.sh <github_repo_url>"
  echo "Example: ./export-from-replit.sh https://github.com/username/quran-companion.git"
  echo ""
  read -p "Please enter your GitHub repository URL: " GITHUB_REPO_URL
  
  if [ -z "$GITHUB_REPO_URL" ]; then
    echo "Error: GitHub repository URL is required"
    exit 1
  fi
else
  GITHUB_REPO_URL=$1
fi

TEMP_DIR=$(mktemp -d)

echo "=== Quran Companion App Export Tool ==="
echo "This script will help you export your Replit app to GitHub."
echo "GitHub Repo: $GITHUB_REPO_URL"
echo "Temporary directory: $TEMP_DIR"

# Check if git is installed
if ! command -v git &> /dev/null; then
  echo "Error: git is not installed. Please install git to continue."
  exit 1
fi

# Skip remote repository check as it might require authentication
echo "Preparing to export files..."

# Instead of cloning, create a fresh local git repository
echo "Creating local git repository..."
mkdir -p $TEMP_DIR
cd $TEMP_DIR
git init
git branch -M main
cd $TEMP_DIR

# Create necessary directories if they don't exist
mkdir -p docs
mkdir -p .github/workflows
mkdir -p scripts

# Navigate back to the Replit project root
cd /home/runner

# Copy files from the current Replit project
echo "Copying files from Replit project..."

# Detect the type of project and copy files accordingly
if [ -f "package.json" ]; then
  echo "Detected Node.js project..."
  find . -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.html" -o -name "*.css" -o -name "*.json" \) -not -path "*/node_modules/*" -not -path "*/.git/*" -not -path "*/\.*" -exec cp --parents {} $TEMP_DIR/ \;
elif [ -f "requirements.txt" ]; then
  echo "Detected Python project..."
  find . -type f \( -name "*.py" -o -name "*.html" -o -name "*.css" -o -name "*.json" \) -not -path "*/venv/*" -not -path "*/.git/*" -not -path "*/\.*" -exec cp --parents {} $TEMP_DIR/ \;
else
  echo "Project type not recognized. Copying all non-binary files..."
  find . -type f -not -path "*/node_modules/*" -not -path "*/venv/*" -not -path "*/.git/*" -not -path "*/\.*" | grep -v -E '\.jpg$|\.png$|\.gif$|\.mp3$|\.wav$|\.pdf$|\.eot$|\.ttf$|\.woff$|\.woff2$' | xargs -I{} cp --parents {} $TEMP_DIR/
fi

# Create documentation files
echo "Creating documentation files..."

# Copy or create documentation files
echo "Ensuring documentation files exist..."

# Create README.md if it doesn't exist in the temp directory
if [ ! -f "$TEMP_DIR/README.md" ] && [ -f "README.md" ]; then
  echo "Copying README.md"
  cp README.md $TEMP_DIR/README.md
elif [ ! -f "$TEMP_DIR/README.md" ]; then
  echo "README.md not found, will be generated by GitHub"
fi

# Copy other documentation files if they exist
if [ -f "CONTRIBUTING.md" ]; then
  echo "Copying CONTRIBUTING.md"
  cp CONTRIBUTING.md $TEMP_DIR/CONTRIBUTING.md
fi

if [ -f "LICENSE" ]; then
  echo "Copying LICENSE"
  cp LICENSE $TEMP_DIR/LICENSE
fi

# Make sure the docs directory exists
mkdir -p $TEMP_DIR/docs

# Copy doc files if they exist
if [ -f "docs/ENVIRONMENT_VARIABLES.md" ]; then
  echo "Copying ENVIRONMENT_VARIABLES.md"
  cp docs/ENVIRONMENT_VARIABLES.md $TEMP_DIR/docs/ENVIRONMENT_VARIABLES.md
fi

if [ -f "docs/API_DOCUMENTATION.md" ]; then
  echo "Copying API_DOCUMENTATION.md"
  cp docs/API_DOCUMENTATION.md $TEMP_DIR/docs/API_DOCUMENTATION.md
fi

if [ -f "docs/DEPLOYMENT.md" ]; then
  echo "Copying DEPLOYMENT.md"
  cp docs/DEPLOYMENT.md $TEMP_DIR/docs/DEPLOYMENT.md
fi

# Make sure the GitHub workflows directory exists
mkdir -p $TEMP_DIR/.github/workflows

# Copy GitHub workflow file if it exists
if [ -f ".github/workflows/ci.yml" ]; then
  echo "Copying CI workflow"
  cp .github/workflows/ci.yml $TEMP_DIR/.github/workflows/ci.yml
fi

# Copy .gitignore if it exists
if [ -f ".gitignore" ]; then
  echo "Copying .gitignore"
  cp .gitignore $TEMP_DIR/.gitignore
fi

# Commit changes
echo "Committing changes to GitHub..."
cd $TEMP_DIR
git add .

# Configure Git user if not already set
if ! git config --get user.email > /dev/null; then
    echo "Setting up Git user configuration..."
    git config user.email "quran.companion@example.com"
    git config user.name "Quran Companion Export Tool"
fi

# Commit with meaningful message
git commit -m "Export Quran Companion app from Replit" -m "Automatically exported using the Quran Companion Export Tool on $(date)"

# Attempt direct push to GitHub
echo "Attempting direct push to GitHub..."
git remote add origin $GITHUB_REPO_URL

# Try setting up credential helper if available
if command -v git-credential-store &> /dev/null; then
    git config credential.helper store
fi

# Try different authentication methods
echo "Using Replit's Git credentials if available..."

# Attempt to push directly
if git push -u origin main; then
    echo "Successfully pushed to GitHub!"
else
    echo "Direct push failed. Trying alternative method with HTTPS..."
    # Try with username/password prompt
    if git push -u origin main; then
        echo "Successfully pushed to GitHub!"
    else
        echo "WARNING: Couldn't automatically push to GitHub."
        echo "IMPORTANT: Your exported repository is available at: $TEMP_DIR"
        echo ""
        echo "You can manually push to GitHub with:"
        echo "  cd $TEMP_DIR"
        echo "  git remote add origin $GITHUB_REPO_URL"
        echo "  git push -u origin main"
    fi
fi

echo "=== Export Complete ==="
echo "Your Quran Companion app has been successfully exported to GitHub."
echo "Repository URL: $GITHUB_REPO_URL"
echo ""
echo "Next steps:"
echo "1. Review the exported code on GitHub"
echo "2. Set up any required environment variables"
echo "3. Configure GitHub Pages or other deployment options"
echo "4. Update the README with specific details about your app"
echo ""
echo "Repository will remain at: $TEMP_DIR"
# We deliberately do NOT remove the temporary directory now
# so that the user can access it manually

echo "Done!"
